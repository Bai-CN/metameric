% Matt Ryerkerk - Michigan State University - June 2019
%  
% Perform and cut and splice crossover.
%
% n crossover points are chosen in each parent solutions. Their locations do not
% have to match between the parents. The genomes are then partitioned based on
% these points, and the resulting segments exchanged, to create child solutions.
%
% inputs: (blank indicates the parameter is not used by this function)
%   params.varList: Used to compare the resulting children to parent solutions
%   outputs:
%   parent1, parent2: The two parent solutions. 
%
% Outputs:
%   params, outputs: Unchanged by this function
%   child1, child2: The unevaluated children generated by this function.

function [params, outputs, child1, child2] = Crossover_CutAndSplice(params, outputs, parent1, parent2)

nPt = 2; % Number of crossover points to use

g1 = parent1.genome; 
g2 = parent2.genome;

L1 = size(g1,1); % Length of initial genomes
L2 = size(g2,1); 

nPt = min([nPt, L1, L2]); % Doesn't make sense to use more crossover points than the length of either solution

pt1 = sort(randperm(L1+1, nPt) - 1); % Crossover points in first parent
pt2 = sort(randperm(L2+1, nPt) - 1); % Crossover points in second parent

% Start with front segments
c1 = g1(1:pt1(1),:);
c2 = g2(1:pt2(1),:);

S = 1; % This is a flag that will alternate between 0 and 1 to determine which 
       % child inherits metavariables from which parent.

for i = 1:nPt-1 % For each resulting genotype segment
  if (S==0) % child 1 receives metavariables from parent 1, child 2 from parent 2. 
    c1 = [c1; g1(pt1(i)+1:pt1(i+1),:)];
    c2 = [c2; g2(pt2(i)+1:pt2(i+1),:)];
    S = 1; % Switch value of flag
  else % child 1 receives metavariables from parent 2, child 2 from parent 1
    c1 = [c1; g2(pt2(i)+1:pt2(i+1),:)];
    c2 = [c2; g1(pt1(i)+1:pt1(i+1),:)];
    S = 0; % Switch value of flag
  end  
end

% End with tail segments
if (S == 0)
  c1 = [c1; g1(pt1(end)+1:end,:)];
  c2 = [c2; g2(pt2(end)+1:end,:)];
else  
  c1 = [c1; g2(pt2(end)+1:end,:)];
  c2 = [c2; g1(pt1(end)+1:end,:)];
end

% Create child individuals and compare to parents
[params, outputs, child1, child2] = SetChildrenCrossover(params, outputs, c1, c2, parent1, parent2);

return
