% Matt Ryerkerk - Michigan State University - June 2019
%  
% Performs a similar metavariable crossover. The distance between all metavariables
% between the two parents is calculated, and linkages are formed between each 
% metavariable and its most similar counterpart. The parent genotypes are then
% segmented into mutually linked blocks, which are then exchanged to form
% children.
%
% inputs: (blank indicates the parameter is not used by this function)
%   params.varList: Used to compare solutions
%   parent1, parent2: The two parent solutions. 
%
% Outputs:
%   params, outputs: Unchanged by this function
%   child1, child2: The unevaluated children generated by this function.

function [params, outputs, child1, child2] = Crossover_SimilarMetavariable(params, outputs, parent1, parent2)

vars = params.varList; % List of variables.

g1 = parent1.genome; % Parent genotypes
g2 = parent2.genome;

% Get distance between all metavariable pairs in g1 and g2. 
[~, d] = MetavariableDissimilarity(g1, g2, [vars.range], [vars.type], params);

% Get most similar counterpart to each metavariable
[~,n1] = min(d, [], 2); 
[~,n2] = min(d, [], 1);

% Segment parent genotypes into mutually linked groups.
% S1(n) will give the group number of metavariable n of parent 1. 

S1 = 1:size(g1,1); % Initially assume each metavariable in the first parent belongs
                   % to its own group. 
                   
S2 = zeros(size(g2, 1), 1); % Assume no initial groupings for parent 2 to start

for i = 1:length(n1) % For each metavariable in Parent 1. 
  % Metavarable i in g1 is connected to n1(i) in g2
  if (S2(n1(i)) == 0) % If attached metavariable in g2 is not in a group already
    S2(n1(i)) = S1(i); % Assign it to the current group of metavariable i in g2
  else % If the attached metavariable HAS been assgned a group
    S1(i) = S2(n1(i)); % Merge metavariable i in g1 to the same group
  end
end

for i = 1:length(n2) % For each metavariable in Parent 2. 
  % Metavariable i in g2 is connected to n2(i) in g1
  if (S2(i) == 0) % If the metavariable in g2 hasn't been assigned a group
    S2(i) = S1(n2(i)); % Assign it to the group of metavariable n2(i) in g1
  else % If the attached metavariable HAS been assigned a group
    % Merge all metavariables of group S2(i) to S1(n2(i)). (the opposite would also work)    
    S1(S1==S2(i)) = S1(n2(i)); % Have to modify S1 first. If we did S2 first would alter S2(i)    
    S2(S2==S2(i)) = S1(n2(i));
  end
end

% If the problem is ordered assign ordering indices to parents.
% Genomes will be rearranged based on their indices after crossover has occured.
if (params.orderedProblem == 1) 
  g1(:,end+1) = linspace(0,1,size(g1, 1));
  g2(:,end+1) = linspace(0,1,size(g2, 1));
end

uS = unique(S1);  % Unique set of group numbers in S1
                  % Note that the unique group numbers in S1 and S2 are the same
numExch = randi([1 max(length(uS)-1, 1)]); % Number of sets to exchange. Note the max is there to handle cases where length(uS) = 1
exchList = randperm(length(uS), numExch); % Set of groups to exchange
c1 = []; c2 = []; % New child genotypes

% Exchange segments in parent genotypes to form children. 
for i = 1:length(uS)
  if(ismember(i, exchList))
    c1 = [c1; g2(S2==uS(i),:)];
    c2 = [c2; g1(S1==uS(i),:)];
  else
    c1 = [c1; g1(S1==uS(i),:)];
    c2 = [c2; g2(S2==uS(i),:)];
  end
end

% If the problem is ordered then rearrange genotypes based on the ordering index.
if (params.orderedProblem == 1)
  c1 = sortrows(c1, size(c1, 2)); % Sort by order index
  c2 = sortrows(c2, size(c2, 2)); 
  c1(:,end) = [];  % Remove ordering index from children
  c2(:,end) = []; 
end

% Create child individuals and compare to parents
[params, outputs, child1, child2] = SetChildrenCrossover(params, outputs, c1, c2, parent1, parent2);

return